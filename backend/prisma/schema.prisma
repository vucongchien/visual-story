generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique // Email sẽ là định danh chính, duy nhất
  name      String
  avatarUrl String?   // URL ảnh đại diện, có thể không có nên là optional
  provider  String    // Nhà cung cấp (ví dụ: "google")
  providerId String   // ID của người dùng từ nhà cung cấp (ví dụ: googleId)

  createdAt DateTime  @default(now())
  sessions  Session[]

  refreshTokens RefreshToken[]

  // Tạo một chỉ mục duy nhất kết hợp provider và providerId
  // để đảm bảo không có hai bản ghi trùng lặp cho cùng một người dùng từ cùng một nhà cung cấp
  @@unique([provider, providerId])
}

model RefreshToken {
  id        String   @id @default(cuid())
  @@index([userId])

  hashedToken String   @unique // Lưu token đã được hash để tăng bảo mật
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked   Boolean  @default(false) // Đánh dấu token đã bị thu hồi hay chưa

  expiresAt   DateTime  // Thời gian hết hạn của refresh token
  ipAddress   String    // Địa chỉ IP của người dùng khi đăng nhập
  deviceInfo  String    // Thông tin về thiết bị/trình duyệt (User-Agent)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id         String         @id @default(cuid())
  title      String
  status     String         @default("in_progress") // in_progress, finished
  currentChoices Json       @default("[]")
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  user       User           @relation(fields: [userId], references: [id])
  userId     String
  genre      Genre          @relation(fields: [genreId], references: [id])
  genreId    String
  setting    Setting        @relation(fields: [settingId], references: [id])
  settingId  String
  story      StorySegment[]
}

enum SegmentType {
  TEXT
  CHOICE
}

model StorySegment {
  id        String      @id @default(cuid())
  type      SegmentType
  content   String
  createdAt DateTime    @default(now())
  session   Session     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String
}

model Genre {
  id       String    @id @default(cuid())
  name     String    @unique
  sessions Session[]
}

model Setting {
  id       String    @id @default(cuid())
  name     String    @unique
  sessions Session[]
}